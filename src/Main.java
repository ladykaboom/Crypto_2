import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.Hex;
import org.paukov.combinatorics.Factory;
import org.paukov.combinatorics.Generator;
import org.paukov.combinatorics.ICombinatoricsVector;


public class Main {
	public static void main(String[] args) throws DecoderException{
		
	  	//String cryptogram

		/*
		 * bin to hex
		 */
		List<String> lista_mozliwych_slow = new ArrayList<String>();
		
		String plaintext_hex = "";
		//String bin_temp
		String bin_temp
		String bin = "";
		
		for( int i =0 ; i< bin_temp.length() - 1 ; i++){
			if(bin_temp.charAt(i)!=' '){
				bin = bin + bin_temp.charAt(i);
			}
		}

		try{
			BigInteger decimal = new BigInteger(bin, 2);
			plaintext_hex = decimal.toString(16);
		}
		catch(NumberFormatException e){}
			
	  	/*
	  	 * 
	  	 */
	  	
	  	ICombinatoricsVector<String> originalVector = Factory.createVector(
			      new String[] { "0","1", "2","3","4","5","6","7","8","9","a","b","c","d","e","f" } );
	      Generator<String> gen = Factory.createPermutationWithRepetitionGenerator(
				originalVector, 8);

	      for (ICombinatoricsVector<String> perm : gen){
	  	  	boolean czy_alfanumeryczne = false;
	  	  	int raz_moze_byc_znak = 1;
	  		//rc4 = null;
	  		String part_hex_key = "31fa3aee";
	  		String gen_key_part = "", hex_key="";
	  			//System.out.println( perm );
	  		for (String string : perm) {
	  			gen_key_part = gen_key_part + string;
	  		}	        	
	  		hex_key = gen_key_part + part_hex_key;
			byte[] key = hex_key.getBytes();

	  	//	byte[] key = Hex.decodeHex(key_check.toCharArray());
	  		
	  		//System.out.println("key = " + hex_key);
	  		if(hex_key == "449bdd83af52c65e"){
	  			break;
	  		}
	  		//for(int i=0; i<key.length; i++)
	  	//	System.out.print(key[i]+" ");
			//System.out.println("\n keycheck = "+key_check);

	  		
	  		//rc4 = new RC4(key);
	  		//String result = rc4.decrypt(cryptogram);
	      //System.out.println(result + "\n");
	  		
		  	RC4 rc4 = new RC4(key);

	  		String cipherText =  plaintext_hex;
			//System.out.println("Encrypted: " + cipherText);
			String decrypted = rc4.decrypt(cipherText);
			//System.out.print("Decrypted: " + decrypted);
			for( int i = 0 ; i < decrypted.length() ; i++){
				int j = (int)decrypted.charAt(i);
				
				if( ((  j >= 65 && j <= 122 ) || (j >= 32 &&  j <= 57))){
					//lista_mozliwych_slow.add(decrypted);
					czy_alfanumeryczne = true;
				}
				else {
					if(raz_moze_byc_znak == 1){raz_moze_byc_znak--;}
					else{
						czy_alfanumeryczne = false;
						break;
					}
					
				}
			}
			if(czy_alfanumeryczne == true )
				lista_mozliwych_slow.add(decrypted);
		    //  System.out.println("Rozmiar listy to: "+lista_mozliwych_slow.size() );
		      

	      }
	      
	      for(int i = 0; i<lista_mozliwych_slow.size(); i++ )
	      {
	    	  System.out.println(lista_mozliwych_slow.get(i));
	      }

	}
}
